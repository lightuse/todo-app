#!/usr/bin/env python3
"""
Sphinx configuration file for Todo App Backend Documentation.

This file configures Sphinx to generate API documentation from Python docstrings.
"""

import os
import sys

# Add the backend directory to the Python path
sys.path.insert(0, os.path.abspath('.'))

# -- Project information -----------------------------------------------------
project = 'Todo App Backend API'
copyright = '2025, Todo App Team'
author = 'Todo App Team'
version = '1.0.0'
release = '1.0.0'

# -- General configuration ---------------------------------------------------
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.viewcode',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    'sphinx.ext.doctest',
    'sphinx.ext.coverage',
    'sphinx.ext.githubpages',
]

# Napoleon settings for Google/NumPy style docstrings
napoleon_google_docstring = True
napoleon_numpy_docstring = True
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = False
napoleon_include_special_with_doc = True
napoleon_use_admonition_for_examples = False
napoleon_use_admonition_for_notes = False
napoleon_use_admonition_for_references = False
napoleon_use_ivar = False
napoleon_use_param = True
napoleon_use_rtype = True
napoleon_preprocess_types = False
napoleon_type_aliases = None
napoleon_attr_annotations = True

# Autodoc settings
autodoc_default_options = {
    'members': True,
    'member-order': 'bysource',
    'special-members': '__init__',
    'undoc-members': True,
    'exclude-members': '__weakref__'
}

# Templates path
templates_path = ['_templates']

# Source file suffixes
source_suffix = '.rst'

# The master toctree document
master_doc = 'index'

# Language for content autogenerated by Sphinx
language = 'en'

# List of patterns to exclude when looking for source files
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments style to use for highlighting
pygments_style = None

# -- Options for HTML output -------------------------------------------------
html_theme = 'sphinx_rtd_theme'
html_theme_options = {
    'canonical_url': '',
    'analytics_id': '',
    'logo_only': False,
    'display_version': True,
    'prev_next_buttons_location': 'bottom',
    'style_external_links': False,
    'vcs_pageview_mode': '',
    'style_nav_header_background': '#2980B9',
    'collapse_navigation': False,
    'sticky_navigation': True,
    'navigation_depth': 4,
    'includehidden': True,
    'titles_only': False
}

# Custom sidebar templates
html_sidebars = {
    '**': [
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
    ]
}

# Static files path (CSS and JavaScript)
html_static_path = ['_static']

# Custom CSS files
html_css_files = [
    'custom.css',
]

# -- Options for HTMLHelp output ---------------------------------------------
htmlhelp_basename = 'TodoAppBackendAPIdoc'

# -- Options for LaTeX output ------------------------------------------------
latex_elements = {}

# -- Options for manual page output ------------------------------------------
man_pages = [
    (master_doc, 'todoappbackendapi', 'Todo App Backend API Documentation',
     [author], 1)
]

# -- Options for Texinfo output ----------------------------------------------
texinfo_documents = [
    (master_doc, 'TodoAppBackendAPI', 'Todo App Backend API Documentation',
     author, 'TodoAppBackendAPI', 'API documentation for Todo App backend.',
     'Miscellaneous'),
]

# -- Options for Epub output -------------------------------------------------
epub_title = project
epub_exclude_files = ['search.html']

# -- Extension configuration -------------------------------------------------

# Intersphinx mapping
intersphinx_mapping = {
    'python': ('https://docs.python.org/3', None),
    'sqlalchemy': ('https://docs.sqlalchemy.org/en/14/', None),
    'fastapi': ('https://fastapi.tiangolo.com/', None),
    'pydantic': ('https://docs.pydantic.dev/2.0/', None),
}

# -- Custom configurations ---------------------------------------------------

# Mock imports for modules that may not be available during doc building
autodoc_mock_imports = []

# Skip certain members
def skip_member(app, what, name, obj, skip, options):
    """Skip certain members from documentation generation."""
    exclusions = ['__dict__', '__module__', '__weakref__']
    if name in exclusions:
        return True
    return skip

def setup(app):
    """Sphinx setup function."""
    app.connect('autodoc-skip-member', skip_member)
    app.add_css_file('custom.css')
