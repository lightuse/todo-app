name: Deploy MKDocs to GitHub Pages

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Manual execution

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Install Node.js dependencies
        working-directory: ./frontend
        run: |
          echo "Installing Node.js dependencies with pnpm..."
          pnpm install
          echo "pnpm dependencies installed successfully"

      - name: Generate TypeDoc documentation
        working-directory: ./frontend
        run: |
          echo "Setting up TypeScript documentation..."
          
          # Generate TypeDoc documentation
          echo "Generating TypeDoc documentation..."
          pnpm run typedoc
          
          # Verify generation
          if [ -d "../docs/api/typescript" ] && [ -f "../docs/api/typescript/index.html" ]; then
            echo "TypeDoc documentation generated successfully"
            echo "Files generated:"
            find ../docs/api/typescript -name "*.html" | head -10
          else
            echo "TypeDoc generation failed"
            exit 1
          fi
          
          echo "TypeDoc step completed"

      - name: Generate Python documentation
        run: |
          echo "Setting up Python documentation..."
          
          # Backend directory check
          if [ -d "backend" ]; then
            echo "Generating Python API documentation using Sphinx..."
            cd backend
            python build-sphinx.py
            cd ..
            
            # Verify generation
            if [ -d "docs/api/python" ] && [ -f "docs/api/python/index.html" ]; then
              echo "Sphinx documentation generated successfully"
              echo "Files generated:"
              find docs/api/python -name "*.html" | head -10
            else
              echo "Sphinx generation failed, creating placeholder..."
              mkdir -p docs/api/python
              cat > docs/api/python/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
  <title>Python API Documentation</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 40px; }
    .placeholder { background: #f5f5f5; padding: 20px; border-radius: 5px; }
  </style>
</head>
<body>
  <h1>Python API Documentation</h1>
  <div class="placeholder">
    <p>Python API documentation will be available here once the backend code is available.</p>
    <p>This is a placeholder page generated during the build process.</p>
  </div>
</body>
</html>
EOF
            fi
          else
            echo "Backend directory not found, creating placeholder..."
            mkdir -p docs/api/python
            cat > docs/api/python/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
  <title>Python API Documentation</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 40px; }
    .placeholder { background: #f5f5f5; padding: 20px; border-radius: 5px; }
  </style>
</head>
<body>
  <h1>Python API Documentation</h1>
  <div class="placeholder">
    <p>Backend directory not found. Python API documentation will be available once the backend is added.</p>
  </div>
</body>
</html>
EOF
          fi
          
          echo "Python documentation step completed"

      - name: Build MKDocs site
        run: |
          echo "Building MKDocs site..."
          mkdocs build --clean
          echo "MKDocs site built successfully"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site
          
      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "MKDocs site built successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # TypeDoc information
          if [ -d "docs/api/typescript" ]; then
            echo "### TypeScript Documentation" >> $GITHUB_STEP_SUMMARY
            if [ -f "docs/api/typescript/index.html" ]; then
              echo "TypeDoc documentation generated" >> $GITHUB_STEP_SUMMARY
              echo "Files: $(find docs/api/typescript -name '*.html' | wc -l) HTML pages" >> $GITHUB_STEP_SUMMARY
            else
              echo "TypeDoc placeholder created" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Python information
          if [ -d "docs/api/python" ]; then
            echo "### Python Documentation" >> $GITHUB_STEP_SUMMARY
            if [ -f "docs/api/python/index.html" ]; then
              echo "Python documentation generated" >> $GITHUB_STEP_SUMMARY
              echo "Files: $(find docs/api/python -name '*.html' | wc -l) HTML pages" >> $GITHUB_STEP_SUMMARY
            else
              echo "Python placeholder created" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Site Statistics" >> $GITHUB_STEP_SUMMARY
          if [ -d "site" ]; then
            echo "Site size: $(du -sh site | cut -f1)" >> $GITHUB_STEP_SUMMARY
            echo "Total files: $(find site -type f | wc -l)" >> $GITHUB_STEP_SUMMARY
            echo "HTML pages: $(find site -name '*.html' | wc -l)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Ready for deployment to GitHub Pages" >> $GITHUB_STEP_SUMMARY

  deploy:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          timeout: 600000
          error_count: 10
          reporting_interval: 30000
