name: Documentation Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    paths: 
      - 'docs/**'
      - '*.md'
      - 'docs/config/mkdocs.yml'
      - 'frontend/README.md'
      - 'frontend/TESTING.md'
      - 'backend/README.md'
      - 'scripts/validate-docs.sh'

jobs:
  validate-documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Python dependencies
      run: |
        pip install mkdocs mkdocs-material
        pip install -r backend/requirements.txt
        
    - name: Install pnpm
      run: npm install -g pnpm
      
    - name: Install Node.js dependencies
      run: |
        cd frontend
        pnpm install --no-frozen-lockfile
        
    - name: Run documentation validation
      run: |
        chmod +x scripts/validate-docs.sh
        ./scripts/validate-docs.sh
        
    - name: Generate API documentation
      run: |
        # TypeScript API documentation
        cd frontend
        pnpm run typedoc
        cd ..
        
        # Python API documentation
        cd backend
        python build-sphinx.py
        cp -r _build/html/* ../docs/api/python/
        cd ..
        
    - name: Validate complete MkDocs build
      run: |
        cd docs/config
        mkdocs build --strict --verbose
        
    - name: Check documentation freshness
      run: |
        echo "Checking for outdated documentation..."
        # APIドキュメントの更新日チェック
        if [ -f "docs/api/typescript/index.html" ]; then
          ts_age=$(find docs/api/typescript -name "index.html" -mtime +30 | wc -l)
          if [ "$ts_age" -gt 0 ]; then
            echo "⚠️ TypeScript API docs are older than 30 days"
          else
            echo "✅ TypeScript API docs are up to date"
          fi
        fi
        
        if [ -f "docs/api/python/index.html" ]; then
          py_age=$(find docs/api/python -name "index.html" -mtime +30 | wc -l)
          if [ "$py_age" -gt 0 ]; then
            echo "⚠️ Python API docs are older than 30 days"
          else
            echo "✅ Python API docs are up to date"
          fi
        fi
        
    - name: Upload documentation artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: generated-docs
        path: |
          site/
          docs/api/
        retention-days: 30
        
    # Only deploy to GitHub Pages on main branch
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd docs/config
        mkdocs gh-deploy --force
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  link-checker:
    runs-on: ubuntu-latest
    needs: validate-documentation
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install mkdocs mkdocs-material
        pip install requests beautifulsoup4
        
    - name: Build documentation
      run: |
        cd docs/config
        mkdocs build
      
    - name: Check external links
      run: |
        python3 - << 'EOF'
        import requests
        import re
        import os
        from urllib.parse import urljoin, urlparse
        from bs4 import BeautifulSoup
        
        def check_external_links():
            print("🔗 Checking external links...")
            site_dir = "site"
            broken_links = []
            
            # HTMLファイルを検索
            for root, dirs, files in os.walk(site_dir):
                for file in files:
                    if file.endswith('.html'):
                        file_path = os.path.join(root, file)
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                            soup = BeautifulSoup(content, 'html.parser')
                            
                            # 外部リンクを検索
                            for link in soup.find_all('a', href=True):
                                href = link['href']
                                if href.startswith('http'):
                                    try:
                                        response = requests.head(href, timeout=10, allow_redirects=True)
                                        if response.status_code >= 400:
                                            broken_links.append((href, response.status_code, file_path))
                                            print(f"❌ {href} - {response.status_code} in {file_path}")
                                        else:
                                            print(f"✅ {href}")
                                    except Exception as e:
                                        broken_links.append((href, str(e), file_path))
                                        print(f"⚠️ {href} - {str(e)} in {file_path}")
            
            if broken_links:
                print(f"\n❌ Found {len(broken_links)} broken external links")
                return False
            else:
                print("\n✅ All external links are working")
                return True
        
        # 外部リンクチェックの実行
        success = check_external_links()
        exit(0 if success else 1)
        EOF
        
  documentation-metrics:
    runs-on: ubuntu-latest
    needs: validate-documentation
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Calculate documentation metrics
      run: |
        echo "📊 Documentation Metrics Report"
        echo "==============================="
        
        # ファイル数
        md_count=$(find . -name "*.md" -not -path "./node_modules/*" -not -path "./venv/*" | wc -l)
        echo "📄 Total Markdown files: $md_count"
        
        # 文字数
        total_words=$(find . -name "*.md" -not -path "./node_modules/*" -not -path "./venv/*" -exec wc -w {} + | tail -1 | awk '{print $1}')
        echo "📝 Total words: $total_words"
        
        # 行数
        total_lines=$(find . -name "*.md" -not -path "./node_modules/*" -not -path "./venv/*" -exec wc -l {} + | tail -1 | awk '{print $1}')
        echo "📏 Total lines: $total_lines"
        
        # 最大・最小ファイルサイズ
        echo "📦 File size distribution:"
        find . -name "*.md" -not -path "./node_modules/*" -not -path "./venv/*" -exec wc -w {} + | sort -n | head -5 | while read count file; do
            echo "  📄 $file: $count words"
        done
        echo "  ..."
        find . -name "*.md" -not -path "./node_modules/*" -not -path "./venv/*" -exec wc -w {} + | sort -nr | head -3 | while read count file; do
            echo "  📄 $file: $count words (largest)"
        done
        
        # 更新頻度
        echo "📅 Recently updated files (last 30 days):"
        find . -name "*.md" -not -path "./node_modules/*" -not -path "./venv/*" -mtime -30 -exec ls -la {} + | wc -l | xargs echo "  Updated files:"
        
        # コード例の数
        code_blocks=$(find . -name "*.md" -not -path "./node_modules/*" -not -path "./venv/*" -exec grep -c '```' {} + | awk '{sum += $1} END {print sum/2}')
        echo "💻 Code blocks: $code_blocks"
        
        # リンク数
        links=$(find . -name "*.md" -not -path "./node_modules/*" -not -path "./venv/*" -exec grep -o '\[.*\](.*)' {} + | wc -l)
        echo "🔗 Total links: $links"
        
        echo ""
        echo "✅ Documentation metrics calculated successfully"
